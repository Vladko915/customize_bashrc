# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    #alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


#usual aliases

alias sudo='sudo '

alias cc="clear"
alias ccc="cmatrix"
alias ll="ls -lih"
alias wl="wc -l"
alias wm="wc -m"
alias bashrc="mcedit ~/.bashrc"
alias tt='sl; sl --help; sl -a; sl -l; sl -F'
alias trcomma="tr -s ',' '\n'"
alias trvg="tr -s '\n' ' '"
alias lsa="ls -a"
alias lr="ls -R"
alias ls1="ls -1"
alias lsd="ls -d */"
alias es1='echo -e "\n"'
alias dash1='echo -e "------------------"'
alias acs='apt-cache search '

alias sls="screen -ls"
alias btc="curl -s https://***.com/ | pup 'span.js-coin-value-usd text{}'"
alias btc60="while true; do btc; sleep 60; done"
alias ttt="echo $TERM"
alias sep="echo -e '\n---\n'";

export EDITOR=/usr/bin/mcedit

#git
alias gis="git status"
alias gil="git log"
alias gid="git diff"
alias gids="git diff --staged"
alias gidc="git diff --cached"
alias gilp1="git log --pretty=oneline"
alias gil1="git log --oneline"
alias gil1d="dash1; git log --oneline --decorate"
alias gil1d10="dash1; git log --oneline --decorate -n 10"
alias gilp1f="git log --pretty=oneline --follow"
alias gilf="git log --follow"
alias gib="dash1; git branch"
alias gich="dash1; git checkout"
alias gihead="dash1; git diff HEAD~1"
alias gisl="dash1; git stash list"

alias gip="dash1; git push -u origin main"

#apache2
alias a2reload="systemctl reload apache2"
alias a2restart="systemctl reload apache2"

#docker
alias doa="sudo docker ps -a"
alias doi="sudo docker images"

#functions
touche ()
{
  touch "$1" && mcedit "$1"
}
touchep ()
{
  s="<?php\n\necho "created file."\n\n?>"
  file="$1.php"

  touch "$file" && echo -e $s > "$file" && mcedit "$file"
}
mkcd ()
{
  mkdir -pv -- "$1" && cd -P -- "$1"
}
cdls ()
{
  cd  -- "$1";
  ls;
}
cdll ()
{
  cd  -- "$1";
  ll;
}

foreach ()
{
c=($1);
for i in ${c[*]};
do
echo $i;
done;
}

t2d ()
{
  t=$(echo $1 | grep -Eo '^.{10}')
  date --date="@$t";
}

curtime()
{
t11=$(date +%s);
echo $t11;
t2d $t11;
}

tbot()
{
text=$1 && \
tbot_token="********:************************"  && \
chat_id="**********"  && \
t_api_url="https://api.telegram.org/bot$tbot_token/sendMessage"  && \
curl -s -X POST $t_api_url -d chat_id=$chat_id -d text="$text" | jq
}


np()
{
curl --silent -X POST https://api.******.ua/v2.0/json/ -d '{
        "apiKey": "",
        "modelName": "TrackingDocument",
        "calledMethod": "getStatusDocuments",
        "methodProperties": {
                "Documents": [
{"DocumentNumber":"204**************","Phone":"380*********"},
{"DocumentNumber":"204","Phone":"380**********"}
                ]
        }
}' | jq '.data[] | {"number":.Number,"weight":.FactualWeight,"price":.AnnouncedPrice,"desc":.CargoDescriptionString,"status":.Status,"delivery_date":.ScheduledDeliveryDate,"return_date":.DateReturnCargo}'
}


timers()
{
    while true; do eval $2; sleep $1; done;
}

#bak ()
#{
#  cp -rv "$1" "${1}.bak"
#}

PS1="\n$PS1"


